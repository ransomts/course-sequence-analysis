[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "course sequence analysis",
    "section": "",
    "text": "Preface\nThis project is looking at the effect of course sequencing on student graduation in higher education."
  },
  {
    "objectID": "intro-to-midfield.html#which-cips-have-the-most-time-in-program",
    "href": "intro-to-midfield.html#which-cips-have-the-most-time-in-program",
    "title": "1  Introduction to midfield",
    "section": "1.1 which cips have the most time in program?",
    "text": "1.1 which cips have the most time in program?\nokay so we’ve decided which cip code set we’re looking at! Great!\nLets see some graphs describing our data within that set. Which cips are the most represented?\n\n\nCode\nmost_represented_majors <- term %>%\n    select(mcid, cip6) %>%\n    filter(cip6 %in% cips_of_interest) %>%\n    select(cip6) %>%\n    arrange(cip6) %>%\n    group_by(cip6) %>%\n    summarise(count = n()) %>%\n    arrange(-count)\n\nmrm_plot <- most_represented_majors %>%\n    ggbarplot(x = \"cip6\", y = \"count\") + rotate_x_text(45)\nggexport(mrm_plot, filename = \"figures/most_represented_majors.png\", verbose = FALSE)\n\n\nfile saved to figures/most_represented_majors.png\n\n\nCode\nknitr::include_graphics(\"figures/most_represented_majors.png\")\n\n\n\n\n\n\n\nCode\nmost_represented_major <- most_represented_majors %>%\n    head(1) %>%\n    pull(cip6)\n\n# make a list of students who obtained this degree\nstudents_who_graduated_major <- degree %>%\n    filter(cip6 == most_represented_major) %>%\n    select(mcid) %>%\n    unique() %>%\n    pull(mcid)\n\n# courses taken by students in most represented major\ncourses_taken <- course %>%\n    filter(mcid %in% students_who_graduated_major) %>%\n    mutate(an = str_c(abbrev, \" \", number)) %>%\n    select(an) %>%\n    group_by(an) %>%\n    summarise(count = n()) %>%\n    arrange(-count)\n\ncourses_taken_plot <- courses_taken %>%\n    head(20) %>%\n    ggbarplot(x = \"an\", y = \"count\") + rotate_x_text(45)\nggexport(courses_taken_plot, filename = \"figures/courses_taken.png\", verbose = FALSE)\n\n\nfile saved to figures/courses_taken.png\n\n\nCode\nknitr::include_graphics(\"figures/courses_taken.png\")\n\n\n\n\n\nMake a stacked bar plot to break down which relative semester each course was taken\n\n\nCode\ncompute_semester_indicies <- function(single_student_record) {\n    bar <- single_student_record %>%\n        tibble() %>%\n        mutate(term_course = as_factor(term_course)) %>%\n        mutate(semester_taken = as.integer(term_course)) %>%\n        list()\n    return(bar)\n}\n\n# this is the continuous interpretation\nwhen_courses_were_taken_discrete <- course %>%\n    filter(mcid %in% students_who_graduated_major) %>%\n    mutate(course = str_c(abbrev, \" \", number), mcid, term_course) %>%\n    select(mcid, course, term_course) %>%\n    nest_by(mcid) %>%\n    mutate(data = compute_semester_indicies(data)) %>%\n    unnest(cols = c(data)) %>%\n    ungroup(mcid) %>%\n    select(course, semester_taken)\n\n# this summarize converts our interpretation to categorical\nwhen_courses_were_taken <- when_courses_were_taken_discrete %>%\n    group_by_all() %>%\n    summarise(COUNT = n()) %>%\n    ungroup()\n\n\n`summarise()` has grouped output by 'course'. You can override using the\n`.groups` argument.\n\n\nCode\ntotal_counts <- when_courses_were_taken %>%\n    group_by(course) %>%\n    summarise(total_count = sum(COUNT)) %>%\n    ungroup()\n\nwhen_courses_were_taken <- left_join(when_courses_were_taken, total_counts, by = \"course\") %>%\n    arrange(-total_count) %>%\n    mutate(semester_taken = as_factor(semester_taken))\n\n\nwhen_bio_courses_were_taken <- when_courses_were_taken %>%\n    filter(grepl(\"BIO\", course))\n\n\n\n\nCode\n# most taken courses stacked by what sequence position they were in\nwhen_courses_were_taken_plot <- when_courses_were_taken %>%\n    filter(total_count > 100) %>%\n    arrange(-COUNT) %>%\n    head(50) %>%\n    ggbarplot(x = \"course\", y = \"COUNT\", fill = \"semester_taken\") + rotate_x_text(45)\nggexport(when_courses_were_taken_plot, filename = \"figures/when_courses_were_taken_barplot.png\",\n    verbose = FALSE)\n\n\nfile saved to figures/when_courses_were_taken_barplot.png\n\n\nCode\nknitr::include_graphics(\"figures/when_courses_were_taken_barplot.png\")\n\n\n\n\n\nCode\n# courses with high variation of sequence position\nwhen_courses_were_taken_barplot <- when_courses_were_taken %>%\n    select(course) %>%\n    group_by(course) %>%\n    summarize(n = n()) %>%\n    ungroup() %>%\n    arrange(-n) %>%\n    head(20) %>%\n    ggbarplot(y = \"course\", x = \"n\", title = \"Number of different sequence positions per course\") +\n    rotate_x_text(45)\n\n\nStoring counts in `nn`, as `n` already present in input\nℹ Use `name = \"new_name\"` to pick a new name.\n\n\nCode\nggexport(when_courses_were_taken_barplot, filename = \"figures/when_courses_were_taken.png\",\n    verbose = FALSE)\n\n\nfile saved to figures/when_courses_were_taken.png\n\n\nCode\nknitr::include_graphics(\"figures/when_courses_were_taken.png\")\n\n\n\n\n\nCode\nhighly_taken_classes <- total_counts %>%\n    arrange(-total_count) %>%\n    head(10)\n\nwhen_courses_were_taken_discrete %>%\n    filter(course %in% highly_taken_classes$course & semester_taken < 10) %>%\n    ggviolin(x = \"course\", y = \"semester_taken\") + rotate_x_text(45) + grids() ->\n    p\np <- ggpar(p, yticks.by = 1)\nggexport(p, filename = \"figures/when_courses_taken_violin.png\", verbose = FALSE)\n\n\nfile saved to figures/when_courses_taken_violin.png\n\n\nCode\nknitr::include_graphics(\"figures/when_courses_taken_violin.png\")"
  },
  {
    "objectID": "course-graphs.html#collection-of-utility-functions",
    "href": "course-graphs.html#collection-of-utility-functions",
    "title": "2  Course Graphs",
    "section": "2.1 collection of utility functions",
    "text": "2.1 collection of utility functions\n\n\nCode\ndid_student_graduate <- function(mcid) {\n    return(degree %>%\n        filter(mcid == mcid) %>%\n        nrow() > 0)\n}\n# make a table of the courses the student took by semester\nformat_courses <- function(single_student) {\n    transcript_summary <- single_student$data[[1]] %>%\n        group_by(term_course) %>%\n        mutate(p = str_c(abbrev, number, sep = \" \")) %>%\n        summarize(label = paste(p, collapse = \"\\n\")) %>%\n        ungroup() %>%\n        select(label)\n    return(transcript_summary)\n}\n# this is a version that can be passed into a mutate statement TODO integrate\n# this with the non-vectorized version with a input variable check\nvectorized_format_courses <- function(data) {\n    transcript_summary <- data %>%\n        group_by(term_course) %>%\n        mutate(p = str_c(abbrev, number, sep = \" \")) %>%\n        summarize(label = paste(p, collapse = \"\\n\")) %>%\n        ungroup() %>%\n        select(label)\n    return(list(transcript_summary))\n}\ncluster_copy(cluster, \"vectorized_format_courses\")"
  },
  {
    "objectID": "course-graphs.html#sampling-student-course-sequences",
    "href": "course-graphs.html#sampling-student-course-sequences",
    "title": "2  Course Graphs",
    "section": "2.2 Sampling student course sequences",
    "text": "2.2 Sampling student course sequences\nLet’s pull out a couple student course paths to take a look at:\n\n\nCode\n# convert to tibble\ncourse <- tibble(course) %>%\n    select(mcid, abbrev, number, term_course) %>%\n    nest_by(mcid)\nstudents_of_interest <- degree %>%\n    filter(cip6 %in% cips_of_interest) %>%\n    select(mcid)\nstudent_sequences_of_interest <- course %>%\n    filter(mcid %in% students_of_interest$mcid)\n\nsingle_student_mcid <- student_sequences_of_interest %>%\n    pull(mcid) %>%\n    getElement(1)\nsingle_student_b_mcid <- student_sequences_of_interest %>%\n    pull(mcid) %>%\n    getElement(2)\n\nsingle_student <- student_sequences_of_interest %>%\n    filter(mcid == single_student_mcid)\nsingle_student_b <- student_sequences_of_interest %>%\n    filter(mcid == single_student_b_mcid)\n\nsmall_sample <- student_sequences_of_interest %>%\n    head(10)\nsingle_student_sequence <- format_courses(single_student)\nsingle_student_sequence_b <- format_courses(single_student_b)"
  },
  {
    "objectID": "course-graphs.html#visualizing-a-students-course-sequence",
    "href": "course-graphs.html#visualizing-a-students-course-sequence",
    "title": "2  Course Graphs",
    "section": "2.3 Visualizing a student’s course sequence",
    "text": "2.3 Visualizing a student’s course sequence\n\n2.3.1 Student level unit of analysis\n\n\nCode\nmake_student_graph <- function(single_student_sequence) {\n\n    make_edges <- function(single_student_sequence) {\n        number_semesters <- nrow(single_student_sequence)\n        return(data.frame(from = seq(number_semesters - 1), to = seq(2, number_semesters)))\n    }\n    make_nodes <- function(single_student_sequence) {\n        number_semesters <- nrow(single_student_sequence)\n        nodes <- data.frame(id = seq(number_semesters), shape = \"box\")\n        return(cbind(nodes, single_student_sequence))\n    }\n\n    g <- NULL\n    g$nodes <- make_nodes(single_student_sequence)\n    g$edges <- make_edges(single_student_sequence)\n    return(g)\n}\n\n\n\n\nCode\n# interactive simple student sequence\ns <- single_student_sequence %>%\n    make_student_graph()\nvisNetwork(s$nodes, s$edges, height = \"500px\", width = \"100%\") %>%\n    visInteraction(navigationButtons = TRUE) %>%\n    visEdges(arrows = \"to\") %>%\n    visExport()"
  },
  {
    "objectID": "course-graphs.html#course-level-unit-of-analysis",
    "href": "course-graphs.html#course-level-unit-of-analysis",
    "title": "2  Course Graphs",
    "section": "2.4 Course level unit of analysis",
    "text": "2.4 Course level unit of analysis\n\n\nCode\nmake_course_graph <- function(single_student_record) {\n\n    make_course_nodes <- function(data) {\n        nodes <- data %>%\n            mutate(node_id = row_number(), course = str_c(abbrev, \" \", number), term_course = as.integer(as_factor(term_course))) %>%\n            select(-abbrev, -number)\n        return(nodes)\n    }\n\n    make_course_edges <- function(data) {\n        # LOTS of ways to speed this up\n        nodes <- make_course_nodes(data)\n\n        edges <- NULL\n        for (i in seq(max(nodes$term_course) - 1)) {\n            previous_course_indicies <- nodes %>%\n                select(term_course, node_id) %>%\n                nest_by(term_course) %>%\n                getElement(2) %>%\n                getElement(i) %>%\n                pull()\n            subsequent_course_indicies <- nodes %>%\n                select(term_course, node_id) %>%\n                nest_by(term_course) %>%\n                getElement(2) %>%\n                getElement(i + 1) %>%\n                pull()\n            if (is.null(edges)) {\n                edges <- expand_grid(previous_course_indicies, subsequent_course_indicies)\n            } else {\n                edges <- rbind(edges, expand_grid(previous_course_indicies, subsequent_course_indicies))\n            }\n        }\n        edges %<>%\n            rename(from = previous_course_indicies, to = subsequent_course_indicies)\n        return(edges)\n    }\n\n    n <- make_course_nodes(single_student_record$data[[1]]) %>%\n        select(course)\n    e <- make_course_edges(single_student_record$data[[1]])\n    return(tbl_graph(nodes = n, edges = e))\n}\nmake_course_graph_vectorized <- function(data) {\n\n    make_course_nodes <- function(data) {\n        nodes <- data %>%\n            mutate(node_id = row_number(), course = str_c(abbrev, \" \", number), term_course = as.integer(as_factor(term_course))) %>%\n            select(-abbrev, -number)\n        return(nodes)\n    }\n\n    make_course_edges <- function(data) {\n        # LOTS of ways to speed this up\n        nodes <- make_course_nodes(data)\n\n        edges <- NULL\n        for (i in seq(max(nodes$term_course) - 1)) {\n            previous_course_indicies <- nodes %>%\n                select(term_course, node_id) %>%\n                nest_by(term_course) %>%\n                getElement(2) %>%\n                getElement(i) %>%\n                pull()\n            subsequent_course_indicies <- nodes %>%\n                select(term_course, node_id) %>%\n                nest_by(term_course) %>%\n                getElement(2) %>%\n                getElement(i + 1) %>%\n                pull()\n            if (is.null(edges)) {\n                edges <- expand_grid(previous_course_indicies, subsequent_course_indicies)\n            } else {\n                edges <- rbind(edges, expand_grid(previous_course_indicies, subsequent_course_indicies))\n            }\n        }\n        edges %<>%\n            rename(from = previous_course_indicies, to = subsequent_course_indicies)\n        return(edges)\n    }\n\n    n <- make_course_nodes(data) %>%\n        select(course)\n    e <- make_course_edges(data)\n    return(list(tbl_graph(nodes = n, edges = e)))\n}\ncluster_copy(cluster, \"make_course_graph_vectorized\")\n\n\n\n\nCode\ngraph_a <- make_course_graph(single_student)\ngraph_b <- make_course_graph(single_student_b)\ngraph_c <- graph_join(graph_a, graph_b, by = join_by(course))\ngraph_d <- bind_graphs(graph_a, graph_b)\nvis_graph_a <- toVisNetworkData(graph_a)\nvis_graph_c <- toVisNetworkData(graph_c)\nvis_graph_d <- toVisNetworkData(graph_d)\n# a bunch of graphs fast igraph visIgraph(as.igraph(graph_c)) %>%\n# visInteraction(navigationButtons = TRUE) %>% visEdges(arrows = 'to') %>%\n# visExport()\ng <- vis_graph_a\n# g$nodes %<>% filter(str_detect(course, 'BIOL'))\ng$nodes %<>%\n    mutate(label = NULL, shape = \"box\") %>%\n    rename(label = course)\n# slow, interactive igraph\nvisNetwork(g$nodes, g$edges, height = \"500px\", width = \"100%\") %>%\n    visInteraction(navigationButtons = TRUE) %>%\n    visEdges(arrows = \"to\") %>%\n    visExport() %>%\n    visPhysics(stabilization = TRUE)\n\n\n\n\n\n\nCode\ng <- vis_graph_d\n# g$nodes %<>% filter(str_detect(course, 'BIOL'))\ng$nodes %<>%\n    mutate(label = NULL, shape = \"box\") %>%\n    rename(label = course)\n# slow, interactive igraph\nvisNetwork(g$nodes, g$edges, height = \"500px\", width = \"100%\") %>%\n    visInteraction(navigationButtons = TRUE) %>%\n    visEdges(arrows = \"to\") %>%\n    visExport() %>%\n    visPhysics(stabilization = TRUE)\n\n\n\n\n\n\nCode\ng <- vis_graph_c\n# g$nodes %<>% filter(str_detect(course, 'BIOL'))\ng$nodes %<>%\n    mutate(label = NULL, shape = \"box\") %>%\n    rename(label = course)\n# slow, interactive igraph\nvisNetwork(g$nodes, g$edges, height = \"500px\", width = \"100%\") %>%\n    visInteraction(navigationButtons = TRUE) %>%\n    visEdges(arrows = \"to\") %>%\n    visExport() %>%\n    visPhysics(stabilization = TRUE)"
  },
  {
    "objectID": "course-graphs.html#compute-all-course-sequences",
    "href": "course-graphs.html#compute-all-course-sequences",
    "title": "2  Course Graphs",
    "section": "2.5 compute all course sequences",
    "text": "2.5 compute all course sequences\n\n2.5.1 EMPLOY THE CORES\n\n\nCode\nunpartitioned_course <- course\ncourse %<>%\n    partition(cluster)\nunpartitioned_sequences <- student_sequences_of_interest\nstudent_sequences_of_interest %<>%\n    partition(cluster)\nunpartitioned_small_sample <- small_sample\nsmall_sample %<>%\n    partition(cluster)\n\n\nUsing partial cluster of size 10\n\n\nCode\ntic()\nstudent_sequences_of_interest %<>%\n    mutate(graphs = make_course_graph_vectorized(data)) %>%\n    collect()\ntoc()\n\n\n155.821 sec elapsed\n\n\nCode\n# write_rds(small_sample, file = 'data/small_sample_graphs.rds')\nwrite_rds(student_sequences_of_interest, file = \"data/course_graphs.rds\")\nstudent_sequences_of_interest <- read_rds(\"data/course_graphs.rds\")"
  },
  {
    "objectID": "graph-properties.html#sample-some-data",
    "href": "graph-properties.html#sample-some-data",
    "title": "3  Graph Properties",
    "section": "3.1 Sample some data",
    "text": "3.1 Sample some data\nWe’ve previously computed the network graphs of a couple student, but lets just sample out a handful more for some visualizations here.\n\n\nCode\nsample_of_graphs <- sample_n(course_graphs, 10)\n\n\n\n3.1.1 Vanilla visualization\nFor reference here’s a visualization with no colorings. It’s a real eyesore to me but hey it makes the other graphs look better by comparison, eh?\n\n\nCode\nvanilla_graph <- sample_of_graphs %>% \n  pull(graphs) %>%\n  reduce(tidygraph::graph_join)\n\n\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\nJoining with `by = join_by(course)`\n\n\nCode\nvisualize_graph(vanilla_graph)\n\n\n\n\n\n\n\n\n3.1.2 Coloring some nodes\n\n\nCode\n# lets use a blue-red spectrum here to show our centrality\npalette <- diverging_hcl(100, palette = \"Blue-Red-3\")\n\ncolored_vanilla_graph <- vanilla_graph %>% \n  activate(nodes) %>% \n  mutate(color = case_when(\n    str_detect(course, \"BIO\") ~ palette[1],\n    str_detect(course, \"CHEM\") ~ palette[100],\n    .default = palette[50]))\n\nvisualize_graph(colored_vanilla_graph)"
  },
  {
    "objectID": "graph-properties.html#edge-ratios",
    "href": "graph-properties.html#edge-ratios",
    "title": "3  Graph Properties",
    "section": "3.2 Edge Ratios",
    "text": "3.2 Edge Ratios"
  },
  {
    "objectID": "graph-properties.html#centrality",
    "href": "graph-properties.html#centrality",
    "title": "3  Graph Properties",
    "section": "3.3 Centrality",
    "text": "3.3 Centrality\n\n\nCode\nnormalize2 <- function(x, na.rm = T) (x  / max(x, na.rm = T))\n\ncolor_key <- palette %>% enframe() %>% rename(index = name, color = value)\n\ncentrality_graph <- vanilla_graph %>% \n  activate(nodes) %>%\n  mutate(centrality = centrality_alpha()) %>% \n  mutate(normalized_centrality_1 = centrality, \n         normalized_centrality_2 = centrality) %>% \n  mutate_at('normalized_centrality_1', ~ scale(.)) %>% \n  mutate_at('normalized_centrality_2', normalize2) %>% \n  mutate(color_index = floor(normalized_centrality_2 * 100)) %>% \n  mutate(color = NULL) %>% \n  left_join(color_key, by = join_by(color_index == index)) %>%\n  arrange(desc(centrality))\n\nvisualize_graph(centrality_graph)"
  },
  {
    "objectID": "graph-properties.html#flow",
    "href": "graph-properties.html#flow",
    "title": "3  Graph Properties",
    "section": "3.4 Flow",
    "text": "3.4 Flow"
  },
  {
    "objectID": "graph-properties.html#cycles",
    "href": "graph-properties.html#cycles",
    "title": "3  Graph Properties",
    "section": "3.5 Cycles",
    "text": "3.5 Cycles"
  }
]