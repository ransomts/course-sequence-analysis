[["index.html", "Course Sequence Analysis Chapter 1 Project overview", " Course Sequence Analysis Tim Ransom Randi Sims 2023-01-28 Chapter 1 Project overview TODO "],["midfield.html", "Chapter 2 midfield 2.1 Exploring the tables 2.2 collection of utility functions 2.3 Pulling student course sequences 2.4 Visualizing a student’s course sequence 2.5 compute all course sequences", " Chapter 2 midfield 2.1 Exploring the tables knitr::opts_chunk$set(tidy = TRUE, cache = TRUE, message = FALSE, error = TRUE) library(tidyverse, warn.conflicts = FALSE, quietly = TRUE) ## ── Attaching packages ──────── ## ✔ ggplot2 3.4.0 ✔ purrr 1.0.1 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.3.0 ✔ stringr 1.5.0 ## ✔ readr 2.1.3 ✔ forcats 0.5.2 ## ── Conflicts ───────────────── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(magrittr) ## ## Attaching package: &#39;magrittr&#39; ## ## The following object is masked from &#39;package:purrr&#39;: ## ## set_names ## ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract library(midfielddata) library(tictoc) library(parallel) # yay parallelism! # leave a core out for system responsiveness library(multidplyr) cluster &lt;- new_cluster(detectCores() - 1) cluster_library(cluster, &quot;dplyr&quot;) cluster_library(cluster, &quot;stringr&quot;) data(course, degree, package = &quot;midfielddata&quot;) 2.2 collection of utility functions did_student_graduate &lt;- function(mcid) { return(degree %&gt;% filter(mcid == mcid) %&gt;% nrow() &gt; 0) } compute_semester_indicies &lt;- function(single_student_record) { bar &lt;- single_student_record$data[[1]] %&gt;% tibble() %&gt;% mutate(term_course = as_factor(term_course)) %&gt;% mutate(semester_taken = as.integer(term_course)) return(bar) } # make a table of the courses the student took by semester format_courses &lt;- function(single_student) { transcript_summary &lt;- single_student$data[[1]] %&gt;% group_by(term_course) %&gt;% mutate(p = str_c(abbrev, number, sep = &quot; &quot;)) %&gt;% summarize(label = paste(p, collapse = &quot;\\n&quot;)) %&gt;% ungroup() %&gt;% select(label) return(transcript_summary) } # this is a version that can be passed into a mutate statement # TODO integrate this with the non-vectorized version with a input variable check vectorized_format_courses &lt;- function(data) { transcript_summary &lt;- data %&gt;% group_by(term_course) %&gt;% mutate(p = str_c(abbrev, number, sep = &quot; &quot;)) %&gt;% summarize(label = paste(p, collapse = &quot;\\n&quot;)) %&gt;% ungroup() %&gt;% select(label) return(list(transcript_summary)) } cluster_copy(cluster, &quot;vfc&quot;) ## Error in `env_get_list()`: ## ! Can&#39;t find `vfc` in environment. 2.3 Pulling student course sequences # convert to tibble course &lt;- tibble(course) %&gt;% select(mcid, abbrev, number, term_course) %&gt;% nest_by(mcid) %&gt;% partition() ## Error in worker_id(data, cluster): argument &quot;cluster&quot; is missing, with no default single_student &lt;- course %&gt;% filter(mcid == &quot;MCID3111142283&quot;) single_student_sequence &lt;- format_courses(single_student) ## Error in UseMethod(&quot;group_by&quot;): no applicable method for &#39;group_by&#39; applied to an object of class &quot;NULL&quot; 2.4 Visualizing a student’s course sequence TODO: visualize a single students path to graduation library(visNetwork) #library(tidygraph) make_edges &lt;- function(single_student_sequence) { number_semesters &lt;- nrow(single_student_sequence) return(data.frame(from = seq(number_semesters), to = append(seq(2, number_semesters), NA))) } make_nodes &lt;- function(single_student_sequence) { number_semesters &lt;- nrow(single_student_sequence) nodes &lt;- data.frame(id = seq(number_semesters), shape = &quot;box&quot;) return(cbind(nodes, single_student_sequence)) } edges &lt;- make_edges(single_student_sequence) nodes &lt;- make_nodes(single_student_sequence) visNetwork(nodes, edges, height = &quot;500px&quot;, width = &quot;100%&quot;) %&gt;% visInteraction(navigationButtons = TRUE) %&gt;% visEdges(arrows = &#39;from&#39;) %&gt;% visExport() 2.5 compute all course sequences 2.5.1 EMPLOY THE CORES tic() # execution time on Tim&#39;s laptop: 1623 seconds = ~27 minutes #course %&lt;&gt;% mutate(sequences = vfc(data)) toc() ## 0.002 sec elapsed "],["modeling-course-sequences.html", "Chapter 3 modeling course sequences 3.1 Random forest model", " Chapter 3 modeling course sequences We’ve already gotten our course sequences, lets use them to train a model! 3.1 Random forest model library(caret) # https://topepo.github.io/caret/train-models-by-tag.html#random-forest https://stackoverflow.com/questions/57939453/building-a-randomforest-with-caret "],["model-visualization.html", "Chapter 4 model visualization", " Chapter 4 model visualization good science comm uses visuals "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
