[["index.html", "Course Sequence Analysis Chapter 1 Project overview", " Course Sequence Analysis Tim Ransom Randi Sims 2023-01-28 Chapter 1 Project overview TODO "],["midfield.html", "Chapter 2 midfield 2.1 Exploring the tables 2.2 collection of utility functions 2.3 Pulling student course sequences 2.4 Visualizing a student’s course sequence", " Chapter 2 midfield 2.1 Exploring the tables 2.2 collection of utility functions did_student_graduate &lt;- function(mcid) { return(degree %&gt;% filter(mcid == mcid) %&gt;% nrow() &gt; 0) } compute_semester_indicies &lt;- function(single_student_record) { single_student_record$data -&gt; foo bar &lt;- foo[[1]] %&gt;% tibble() %&gt;% mutate(term_course = as_factor(term_course)) %&gt;% mutate(semester_taken = as.integer(term_course)) return(bar) } # data is the results from the format_courses &lt;- function(single_student) { transcript_summary &lt;- single_student$data[[1]] %&gt;% group_by(term_course) %&gt;% mutate(p = str_c(abbrev, number, sep = &quot; &quot;)) %&gt;% summarize(label = paste(p, collapse = &quot;\\n&quot;)) %&gt;% ungroup() %&gt;% select(label) return(transcript_summary) } 2.3 Pulling student course sequences # convert to tibble course &lt;- tibble(course) %&gt;% select(mcid, abbrev, number, term_course) %&gt;% nest_by(mcid) single_student &lt;- course %&gt;% filter(mcid == &quot;MCID3111142283&quot;) single_student_sequence &lt;- format_courses(single_student) 2.4 Visualizing a student’s course sequence TODO: visualize a single students path to graduation library(visNetwork) library(tidygraph) ## ## Attaching package: &#39;tidygraph&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## filter make_edges &lt;- function(single_student_sequence) { number_semesters &lt;- nrow(single_student_sequence) return(data.frame(from = seq(number_semesters), to = append(seq(2, number_semesters), NA))) } make_nodes &lt;- function(single_student_sequence) { number_semesters &lt;- nrow(single_student_sequence) nodes &lt;- data.frame(id = seq(number_semesters), shape = &quot;box&quot;) return(cbind(nodes, single_student_sequence)) } edges &lt;- make_edges(single_student_sequence) nodes &lt;- make_nodes(single_student_sequence) visNetwork(nodes, edges, height = &quot;500px&quot;, width = &quot;100%&quot;) %&gt;% visInteraction(navigationButtons = TRUE) %&gt;% visEdges(arrows = &#39;from&#39;) "],["modeling-course-sequences.html", "Chapter 3 modeling course sequences 3.1 Random forest model", " Chapter 3 modeling course sequences We’ve already gotten our course sequences, lets use them to train a model! 3.1 Random forest model library(caret) ## Loading required package: lattice ## ## Attaching package: &#39;caret&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## lift # https://topepo.github.io/caret/train-models-by-tag.html#random-forest https://stackoverflow.com/questions/57939453/building-a-randomforest-with-caret "],["model-visualization.html", "Chapter 4 model visualization", " Chapter 4 model visualization good science comm uses visuals "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
